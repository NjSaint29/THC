# Generated by Django 5.2.4 on 2025-07-31 22:51

import json
import os
from django.db import migrations
from django.contrib.auth.models import Group, Permission
from django.contrib.auth import get_user_model
from django.core import serializers


def import_sqlite_data(apps, schema_editor):
    """
    Import all data from SQLite database export
    """
    # Get the directory where this migration file is located
    migration_dir = os.path.dirname(__file__)
    project_root = os.path.dirname(os.path.dirname(os.path.dirname(migration_dir)))
    data_dir = os.path.join(project_root, 'data_export')

    # Alternative paths to try
    alternative_paths = [
        data_dir,
        os.path.join(os.path.dirname(migration_dir), '..', '..', 'data_export'),
        os.path.join('/opt/render/project/src', 'data_export'),  # Render deployment path
        'data_export',  # Relative to current directory
    ]

    # Find the correct data directory
    data_dir = None
    for path in alternative_paths:
        if os.path.exists(path):
            data_dir = path
            break

    if not os.path.exists(data_dir):
        print(f"Data export directory not found: {data_dir}")
        return

    print(f"Importing data from: {data_dir}")

    # Import in dependency order
    import_order = [
        ('groups.json', 'Groups'),
        ('users.json', 'Users'),
        ('campaigns.json', 'Campaigns'),
        ('lab_tests.json', 'Lab Tests'),
        ('patients.json', 'Patients'),
        ('clinical_parameters.json', 'Clinical Parameters'),
        ('consultations.json', 'Consultations'),
        ('lab_orders.json', 'Lab Orders'),
        ('lab_results.json', 'Lab Results'),
    ]

    for filename, description in import_order:
        filepath = os.path.join(data_dir, filename)
        if os.path.exists(filepath):
            try:
                with open(filepath, 'r', encoding='utf-8') as f:
                    data = f.read()

                # Deserialize and save objects
                objects = serializers.deserialize('json', data)
                count = 0
                for obj in objects:
                    # Check if object already exists to avoid duplicates
                    model_class = obj.object.__class__
                    if hasattr(obj.object, 'pk') and obj.object.pk:
                        existing = model_class.objects.filter(pk=obj.object.pk).first()
                        if not existing:
                            obj.save()
                            count += 1
                    else:
                        obj.save()
                        count += 1

                print(f"Imported {count} {description}")

            except Exception as e:
                print(f"Error importing {description}: {str(e)}")
        else:
            print(f"File not found: {filepath}")

    # Fix user roles and groups after import
    fix_user_roles_and_groups()

    print("Data import completed successfully")


def fix_user_roles_and_groups():
    """
    Fix user roles and group assignments after import
    """
    User = get_user_model()

    # Role to Group mapping
    role_group_mapping = {
        'registration_clerk': 'Registration Clerks',
        'vitals_clerk': 'Vitals Clerks',
        'doctor': 'Doctors',
        'lab_technician': 'Lab Technicians',
        'pharmacy_clerk': 'Pharmacy Clerks',
        'campaign_manager': 'Campaign Managers',
        'data_analyst': 'Data Analysts',
        'admin': 'Administrators',
    }

    users_fixed = 0
    for user in User.objects.all():
        if user.role:
            group_name = role_group_mapping.get(user.role)
            if group_name:
                try:
                    group, created = Group.objects.get_or_create(name=group_name)
                    if not user.groups.filter(name=group_name).exists():
                        user.groups.add(group)
                        users_fixed += 1

                    # Set admin privileges for admin users
                    if user.role == 'admin':
                        if not user.is_staff:
                            user.is_staff = True
                        if not user.is_superuser:
                            user.is_superuser = True
                        user.save()

                except Exception as e:
                    print(f"Error fixing user {user.username}: {str(e)}")

    print(f"Fixed roles and groups for {users_fixed} users")


def reverse_import_sqlite_data(apps, schema_editor):
    """
    Reverse the data import (for rollback)
    """
    print("Reversing SQLite data import")
    # Note: This is a destructive operation and should be used carefully
    # In production, you might want to backup before running this


class Migration(migrations.Migration):

    dependencies = [
        ("accounts", "0008_fix_admin_permissions"),
        ("campaigns", "0002_auto_20250731_1823"),
        ("patients", "0001_initial"),
        ("consultations", "0007_alter_laborder_lab_status"),
        ("laboratory", "0002_auto_20250731_1834"),
    ]

    operations = [
        migrations.RunPython(import_sqlite_data, reverse_import_sqlite_data),
    ]
