# Generated by Django 5.2.4 on 2025-07-31 21:27

from django.db import migrations
from django.contrib.auth.models import Group, Permission
from django.contrib.contenttypes.models import ContentType


def create_groups_and_permissions(apps, schema_editor):
    """
    Create user groups and assign appropriate permissions
    """
    # Get all the models we need permissions for
    User = apps.get_model('accounts', 'User')
    Patient = apps.get_model('patients', 'Patient')
    Consultation = apps.get_model('consultations', 'Consultation')
    LabOrder = apps.get_model('consultations', 'LabOrder')
    LabResult = apps.get_model('laboratory', 'LabResult')
    Campaign = apps.get_model('campaigns', 'Campaign')

    # Define groups and their permissions
    groups_permissions = {
        'Registration Clerks': [
            # Patient permissions
            'add_patient',
            'change_patient',
            'view_patient',
            # Limited consultation view for patient lookup
            'view_consultation',
        ],

        'Vitals Clerks': [
            # Patient permissions for vitals
            'view_patient',
            'change_patient',  # For updating vitals
            # Consultation permissions for vitals entry
            'view_consultation',
            'change_consultation',  # For updating vitals in consultation
        ],

        'Doctors': [
            # Full patient access
            'view_patient',
            'change_patient',
            # Full consultation access
            'add_consultation',
            'change_consultation',
            'view_consultation',
            'delete_consultation',
            # Lab order permissions
            'add_laborder',
            'change_laborder',
            'view_laborder',
            'delete_laborder',
            # Lab result viewing
            'view_labresult',
        ],

        'Lab Technicians': [
            # Patient viewing for lab work
            'view_patient',
            # Lab order viewing
            'view_laborder',
            'change_laborder',  # For updating status
            # Lab result management
            'add_labresult',
            'change_labresult',
            'view_labresult',
            'delete_labresult',
            # Consultation viewing for context
            'view_consultation',
        ],

        'Pharmacy Clerks': [
            # Patient viewing
            'view_patient',
            # Consultation viewing for prescriptions
            'view_consultation',
            'change_consultation',  # For updating prescription status
        ],

        'Campaign Managers': [
            # Campaign management
            'add_campaign',
            'change_campaign',
            'view_campaign',
            'delete_campaign',
            # Patient overview
            'view_patient',
            # Consultation overview
            'view_consultation',
            # Lab overview
            'view_laborder',
            'view_labresult',
        ],

        'Data Analysts': [
            # Read-only access to all data for reporting
            'view_patient',
            'view_consultation',
            'view_laborder',
            'view_labresult',
            'view_campaign',
        ],

        'Administrators': [
            # Full access to everything
            'add_user', 'change_user', 'view_user', 'delete_user',
            'add_patient', 'change_patient', 'view_patient', 'delete_patient',
            'add_consultation', 'change_consultation', 'view_consultation', 'delete_consultation',
            'add_laborder', 'change_laborder', 'view_laborder', 'delete_laborder',
            'add_labresult', 'change_labresult', 'view_labresult', 'delete_labresult',
            'add_campaign', 'change_campaign', 'view_campaign', 'delete_campaign',
        ],
    }

    # Create groups and assign permissions
    for group_name, permission_codenames in groups_permissions.items():
        group, created = Group.objects.get_or_create(name=group_name)
        if created:
            print(f"Created group: {group_name}")

        # Clear existing permissions
        group.permissions.clear()

        # Add permissions to group
        for codename in permission_codenames:
            try:
                permission = Permission.objects.get(codename=codename)
                group.permissions.add(permission)
                print(f"Added permission {codename} to {group_name}")
            except Permission.DoesNotExist:
                print(f"Warning: Permission {codename} not found")

        group.save()

    print("Groups and permissions setup completed")


def reverse_create_groups_and_permissions(apps, schema_editor):
    """
    Remove the created groups
    """
    group_names = [
        'Registration Clerks',
        'Vitals Clerks',
        'Doctors',
        'Lab Technicians',
        'Pharmacy Clerks',
        'Campaign Managers',
        'Data Analysts',
        'Administrators',
    ]

    for group_name in group_names:
        try:
            group = Group.objects.get(name=group_name)
            group.delete()
            print(f"Removed group: {group_name}")
        except Group.DoesNotExist:
            print(f"Group {group_name} not found")


class Migration(migrations.Migration):

    dependencies = [
        ("accounts", "0004_auto_20250731_1820"),
        ("patients", "0001_initial"),
        ("consultations", "0007_alter_laborder_lab_status"),
        ("laboratory", "0002_auto_20250731_1834"),
        ("campaigns", "0002_auto_20250731_1823"),
    ]

    operations = [
        migrations.RunPython(create_groups_and_permissions, reverse_create_groups_and_permissions),
    ]
